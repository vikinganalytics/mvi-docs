.. _monitoring-reference:

Monitoring Your Service
=======================

Monitoring is a very important aspect of software deployment. Deployed algorithms
often deteriorate over time, in a process called 
`domain shift <https://en.wikipedia.org/wiki/Domain_adaptation>`_, and being able
to monitor your deployed algorithms can make all the difference in detecting this
in the early stages.

Monitoring Variables
--------------------

To monitor the value of a variable in the code you can use the
:py:func:`~mvi.mvi.store` function. It takes an arbitrary number of keyword
arguments and saves their values in a time-series database, where they can be
retrieved at a later time. :py:func:`~mvi.mvi.store` supports integer,
float and string data. Let's use the `hello` service as an example::

    import logging
    from mvi.mvi import MviService, store
    
    mvi = MviService()
    logger = logging.getLogger(__name__)

    mvi.add_parameter("greeting_phrase", "Hello")

    @mvi.entrypoint
    def hello(name: str) -> str:
        greeting_phrase = mvi.get_parameter("greeting_phrase")
        logger.info(f"Greeting someone with the name: {name}")
        
        # Now the name and greeting will be stored everytime this function is called
        store(name=name, greeting=greeting_phrase)

        return f"{greeting_phrase} {name}"

Monitoring an Entrypoint
------------------------

It is also possible to automatically monitor the input and output of a service
entrypoint. To do this we pass ``monitor=True`` to the 
:py:meth:`~mvi.mvi.MviService.entrypoint` decorator::

    import logging
    from mvi.mvi import MviService, store

    mvi = MviService()
    logger = logging.getLogger(__name__)

    mvi.add_parameter("greeting_phrase", "Hello")

    # Now the input and output of this entrypoint is stored after each call 
    @mvi.entrypoint(monitor=True)
    def hello(name: str) -> str:
        greeting_phrase = mvi.get_parameter("greeting_phrase")
        logger.info(f"Greeting someone with the name: {name}")
        return f"{greeting_phrase} {name}"

In this case, the data is saved as json strings, in order to support more data
formats.

Monitoring a Parameter
----------------------

Parameters set with :py:func:`~mvi.mvi.add_parameter` can also be monitored by passing
``monitor=True``, which also supports integer, float and string data::

    import logging
    from mvi.mvi import MviService, store

    mvi = MviService()
    logger = logging.getLogger(__name__)

    # Now the value of ``"greeting_phrase"`` is stored every time it's updated
    mvi.add_parameter("greeting_phrase", "Hello", monitor=True)

    @mvi.entrypoint
    def hello(name: str) -> str:
        greeting_phrase = mvi.get_parameter("greeting_phrase")
        logger.info(f"Greeting someone with the name: {name}")
        return f"{greeting_phrase} {name}"

Getting the Data
----------------

The floor is yours, Fredrik Mile!
